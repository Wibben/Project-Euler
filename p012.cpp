/**
 * Problem 12: Highly Divisible Triangular Number
 *
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 * The first ten terms would be:
 *
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *
 *      1: 1
 *      3: 1,3
 *      6: 1,2,3,6
 *     10: 1,2,5,10
 *     15: 1,3,5,15
 *     21: 1,3,7,21
 *     28: 1,2,4,7,14,28
 *
 * We can see that 28 is the first triangle number to have over five divisors.
 *
 * What is the value of the first triangle number to have over five hundred divisors?
 */

#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

// Generate a list of exponents of each prime factor, the actual factor doesn't matter
vector<int> getPrimeFactorExponents(long long number)
{
    // Holds the exponents of each prime factor
    vector<int> primeFactorExponents;
    int numFactors = 0;

    // 2 is the first and only prime number, divide the
    // number until no longer divisible by 2
    if(number%2==0) {
        number /= 2;
        primeFactorExponents.push_back(1);
        numFactors++;
    }
    // Get the multiplicity of 2
    while(number%2 == 0) {
        number /= 2;
        primeFactorExponents[numFactors-1]++;
    }

    // Starting from 3, go up until sqrt(number) and if number is divisible by i,
    // i is guaranteed to be prime and divide number by i until it becomes indivisible
    for(long long i=3; i<=sqrt(number); i+=2) {
        // Check if it is a prime factor
        if(number%i==0) {
            number /= i;
            primeFactorExponents.push_back(1);
            numFactors++;
        }
        // Find the multiplicity of the factor
        while(number%i == 0) {
            number /= i;
            primeFactorExponents[numFactors-1]++;
        }
    }

    // The above process may leave one final prime factor out due to the
    // square root process (if the final prime factor has multiplicity of 1)
    // When this happens, the final prime factor will be the final value of the number
    if(number>1) primeFactorExponents.push_back(1);

    return primeFactorExponents;
}

int main ()
{
    // Method: Generate triangular numbers one by one and get their prime
    // factorizations, the number of factors is the product of all the
    // (exponents+1) of the prime factors
    long long triangleNumber = 0;
    int divisors = 0;

    // Generate triangle numbers by adding i to the current triangle number,
    // terminate the loop once the number of divisors is greater than 500
    for(int i=1; divisors<500; i++) {
        triangleNumber += i;
        vector<int> primeFactorExponents = getPrimeFactorExponents(triangleNumber);

        // Go through the list of exponents, add 1 to each and get the product
        divisors = 1;
        for(int j=0; j<primeFactorExponents.size(); j++) {
            divisors *= (primeFactorExponents[j]+1);
        }

        cout << triangleNumber << ": " << divisors << endl;
    }

    // Output the triangle number
    cout << "The first triangle number to have over 500 divisors is: " << triangleNumber << endl;

    return 0;
}

